#!/usr/bin/env python3
"""
Skrypt do uruchamiania wszystkich testowych us≈Çug jednocze≈õnie.
"""

import os
import signal
import subprocess
import sys
import time
from pathlib import Path


class ServiceManager:
    """ZarzƒÖdza procesami testowych us≈Çug."""

    def __init__(self):
        self.processes = {}
        self.project_root = Path(__file__).parent.parent.parent
        self.services_dir = Path(__file__).parent

    def start_service(self, service_name: str, script_path: str, args: list = None) -> bool:
        """
        Uruchamia pojedynczƒÖ us≈Çugƒô w osobnym procesie.

        Args:
            service_name: Nazwa us≈Çugi do wy≈õwietlania
            script_path: ≈öcie≈ºka do skryptu us≈Çugi
            args: Dodatkowe argumenty dla skryptu

        Returns:
            True je≈õli uruchomiono pomy≈õlnie
        """
        try:
            # Przygotuj ≈õrodowisko
            env = os.environ.copy()
            env["PYTHONPATH"] = str(self.project_root / "src")

            # Przygotuj komendƒô
            cmd = [sys.executable, script_path]
            if args:
                cmd.extend(args)

            print(f"üöÄ Uruchamianie {service_name}...")

            # Uruchom proces
            process = subprocess.Popen(cmd, env=env, cwd=str(self.services_dir), stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1, universal_newlines=True)

            self.processes[service_name] = process

            # Sprawd≈∫ czy proces siƒô uruchomi≈Ç
            time.sleep(0.5)
            if process.poll() is None:
                print(f"‚úÖ {service_name} uruchomiony (PID: {process.pid})")
                return True
            else:
                stdout, stderr = process.communicate()
                print(f"‚ùå {service_name} nie uruchomi≈Ç siƒô")
                if stderr:
                    print(f"   B≈ÇƒÖd: {stderr}")
                return False

        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd uruchamiania {service_name}: {e}")
            return False

    def start_all_services(self) -> bool:
        """
        Uruchamia wszystkie testowe us≈Çugi.

        Returns:
            True je≈õli wszystkie us≈Çugi uruchomiono pomy≈õlnie
        """
        print("=" * 60)
        print("üéØ Uruchamianie testowych us≈Çug dla Orchestratora")
        print("=" * 60)

        # Lista us≈Çug do uruchomienia
        services = [
            ("IO Service (port 8001)", "io_service.py"),
            ("Supervisor 1 (port 8002)", "supervisor_service.py", ["1"]),
            ("Supervisor 2 (port 8003)", "supervisor_service.py", ["2"]),
            ("MunchiesAlgo (port 8004)", "munchies_algo_service.py"),
        ]

        success_count = 0
        for service_info in services:
            service_name = service_info[0]
            script_name = service_info[1]
            args = service_info[2] if len(service_info) > 2 else None

            script_path = self.services_dir / script_name
            if self.start_service(service_name, str(script_path), args):
                success_count += 1

            time.sleep(1)  # Odstƒôp miƒôdzy uruchamianiem us≈Çug

        print("\n" + "=" * 60)
        if success_count == len(services):
            print(f"üéâ Wszystkie {len(services)} us≈Çug uruchomiono pomy≈õlnie!")
            print("\nüìã Porty us≈Çug:")
            print("   - IO Service:      http://127.0.0.1:8001")
            print("   - Supervisor 1:    http://127.0.0.1:8002")
            print("   - Supervisor 2:    http://127.0.0.1:8003")
            print("   - MunchiesAlgo:    http://127.0.0.1:8004")
            print("\nüîß Mo≈ºesz teraz uruchomiƒá Orchestrator na porcie 8000")
            print("=" * 60)
            return True
        else:
            print(f"‚ö†Ô∏è  Uruchomiono tylko {success_count}/{len(services)} us≈Çug")
            print("=" * 60)
            return False

    def stop_all_services(self):
        """Zatrzymuje wszystkie uruchomione us≈Çugi."""
        print("\nüõë Zatrzymywanie wszystkich us≈Çug...")

        for service_name, process in self.processes.items():
            try:
                if process.poll() is None:  # Proces nadal dzia≈Ça
                    print(f"   Zatrzymywanie {service_name}...")
                    process.terminate()

                    # Czekaj na graceful shutdown
                    try:
                        process.wait(timeout=5)
                        print(f"   ‚úÖ {service_name} zatrzymany")
                    except subprocess.TimeoutExpired:
                        print(f"   ‚ö†Ô∏è  {service_name} - wymu≈õ zamkniƒôcie...")
                        process.kill()
                        process.wait()
                        print(f"   üíÄ {service_name} zabity")
                else:
                    print(f"   ‚ÑπÔ∏è  {service_name} ju≈º zatrzymany")

            except Exception as e:
                print(f"   ‚ùå B≈ÇƒÖd zatrzymywania {service_name}: {e}")

        self.processes.clear()
        print("üèÅ Wszystkie us≈Çugi zatrzymane")

    def show_status(self):
        """Pokazuje status wszystkich us≈Çug."""
        print("\nüìä Status us≈Çug:")
        print("-" * 40)

        if not self.processes:
            print("   Brak uruchomionych us≈Çug")
            return

        for service_name, process in self.processes.items():
            if process.poll() is None:
                print(f"   ‚úÖ {service_name} - dzia≈Ça (PID: {process.pid})")
            else:
                print(f"   ‚ùå {service_name} - zatrzymany")

    def wait_for_services(self):
        """Czeka na zatrzymanie wszystkich us≈Çug."""
        try:
            print("\n‚åõ Us≈Çugi dzia≈ÇajƒÖ... (Naci≈õnij Ctrl+C aby zatrzymaƒá)")

            while True:
                time.sleep(1)

                # Sprawd≈∫ czy jakie≈õ procesy siƒô zatrzyma≈Çy
                stopped_services = []
                for service_name, process in self.processes.items():
                    if process.poll() is not None:
                        stopped_services.append(service_name)

                # Usu≈Ñ zatrzymane us≈Çugi
                for service_name in stopped_services:
                    del self.processes[service_name]
                    print(f"‚ö†Ô∏è  {service_name} zatrzyma≈Ç siƒô niespodziewanie")

                # Je≈õli wszystkie us≈Çugi siƒô zatrzyma≈Çy
                if not self.processes:
                    print("‚ÑπÔ∏è  Wszystkie us≈Çugi zatrzyma≈Çy siƒô")
                    break

        except KeyboardInterrupt:
            print("\nüõë Otrzymano sygna≈Ç przerwania...")


def main():
    """G≈Ç√≥wna funkcja."""
    manager = ServiceManager()

    # Obs≈Çuga sygna≈Çu przerwania
    def signal_handler(sig, frame):
        print("\nüõë Otrzymano sygna≈Ç zatrzymania...")
        manager.stop_all_services()
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # Sprawd≈∫ argumenty wiersza polece≈Ñ
        if len(sys.argv) > 1:
            command = sys.argv[1].lower()

            if command == "status":
                manager.show_status()
                return
            elif command == "stop":
                manager.stop_all_services()
                return
            elif command in ["help", "-h", "--help"]:
                print("U≈ºycie:")
                print("  python run_all_services.py          # Uruchom wszystkie us≈Çugi")
                print("  python run_all_services.py status   # Poka≈º status")
                print("  python run_all_services.py stop     # Zatrzymaj wszystkie")
                print("  python run_all_services.py help     # Poka≈º pomoc")
                return

        # Uruchom wszystkie us≈Çugi
        if manager.start_all_services():
            manager.wait_for_services()
        else:
            print("‚ö†Ô∏è  Nie uda≈Ço siƒô uruchomiƒá wszystkich us≈Çug")
            manager.stop_all_services()
            sys.exit(1)

    except Exception as e:
        print(f"‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        manager.stop_all_services()
        sys.exit(1)
    finally:
        manager.stop_all_services()


if __name__ == "__main__":
    main()
