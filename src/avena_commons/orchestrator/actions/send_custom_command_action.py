"""
Implementacja akcji send_custom_command dla scenariuszy.
Umo≈ºliwia wysy≈Çanie polece≈Ñ niestandardowych z dowolnymi danymi do serwis√≥w.
"""

from typing import Any, Dict, List

from avena_commons.util.logger import debug, info

from ..models.scenario_models import ScenarioContext
from .base_action import ActionExecutionError, BaseAction


class SendCustomCommandAction(BaseAction):
    """
    Akcja wysy≈Çania polece≈Ñ niestandardowych z danymi do serwis√≥w.

    Obs≈Çuguje r√≥≈ºne selektory:
    - client: pojedynczy serwis
    - group: jedna grupa serwis√≥w
    - groups: wiele grup serwis√≥w
    - target: "@all" dla wszystkich serwis√≥w

    W przeciwie≈Ñstwie do send_command, pozwala na wys≈Çanie dowolnych danych
    wraz z poleceniem niestandardowym.

    Przyk≈Çad u≈ºycia w JSON:
    {
        "type": "send_custom_command",
        "client": "supervisor_1",
        "command": "SET_POSITION",
        "data": {
            "x": 100.5,
            "y": 200.3,
            "z": 15.0,
            "speed": 0.8
        },
        "description": "Ustawienie pozycji robota"
    }

    {
        "type": "send_custom_command",
        "group": "sensors",
        "command": "CONFIGURE_THRESHOLDS",
        "data": {
            "min_value": 0.1,
            "max_value": 95.0,
            "alert_enabled": true
        }
    }
    """

    async def execute(
        self, action_config: Dict[str, Any], context: ScenarioContext
    ) -> None:
        """
        Wykonuje akcjƒô wysy≈Çania polecenia niestandardowego z danymi.

        Args:
            action_config: Konfiguracja akcji z polami:
                - command (str): Nazwa polecenia niestandardowego
                - data (dict): S≈Çownik z danymi do wys≈Çania
                - client/group/groups/target: Selektor cel√≥w
                - timeout (optional): Timeout dla polecenia
            context: Kontekst wykonania

        Raises:
            ActionExecutionError: W przypadku b≈Çƒôdu wykonania
        """
        try:
            # Sprawd≈∫ czy komenda jest okre≈õlona
            command = action_config.get("command")
            if not command:
                raise ActionExecutionError(
                    "send_custom_command", "Brak komendy do wys≈Çania (pole: command)"
                )

            # Pobierz dane do wys≈Çania (domy≈õlnie pusty s≈Çownik)
            command_data = action_config.get("data", {})
            if not isinstance(command_data, dict):
                raise ActionExecutionError(
                    "send_custom_command",
                    f"Pole 'data' musi byƒá s≈Çownikiem, otrzymano: {type(command_data).__name__}",
                )

            # RozwiƒÖ≈º zmienne szablonowe w danych
            resolved_data = self._resolve_template_variables_in_data(
                command_data, context
            )

            # Okre≈õl komponenty docelowe
            target_clients = self._resolve_target_clients(action_config, context)
            if not target_clients:
                raise ActionExecutionError(
                    "send_custom_command", "Nie znaleziono komponent√≥w docelowych"
                )

            debug(
                f"üì§ send_custom_command: Wysy≈Çam '{command}' z danymi {resolved_data} do {len(target_clients)} klient√≥w: {target_clients}",
                message_logger=context.message_logger,
            )

            # Wy≈õlij polecenie do wszystkich komponent√≥w docelowych
            for client_name in target_clients:
                await self._send_custom_command_to_client(
                    client_name, command, resolved_data, action_config, context
                )

            info(
                f"‚úÖ send_custom_command: Pomy≈õlnie wys≈Çano '{command}' do wszystkich {len(target_clients)} klient√≥w",
                message_logger=context.message_logger,
            )

        except ActionExecutionError:
            # Przepu≈õƒá b≈Çƒôdy ActionExecutionError
            raise
        except Exception as e:
            raise ActionExecutionError(
                "send_custom_command", f"Nieoczekiwany b≈ÇƒÖd: {str(e)}"
            )

    def _resolve_target_clients(
        self, action_config: Dict[str, Any], context: ScenarioContext
    ) -> List[str]:
        """
        RozwiƒÖzuje komponenty docelowe na podstawie selektor√≥w.
        Identyczna logika jak w SendCommandAction.

        Args:
            action_config: Konfiguracja akcji
            context: Kontekst wykonania

        Returns:
            Lista nazw komponent√≥w docelowych
        """
        target_clients = []
        orchestrator = context.orchestrator

        # Sprawd≈∫ selektor "@all"
        if "target" in action_config and action_config["target"] == "@all":
            target_clients.extend(context.clients)

        # Sprawd≈∫ pojedynczy komponent
        elif "client" in action_config and action_config["client"]:
            client_name = self._resolve_template_variables(
                action_config["client"], context
            )
            target_clients.append(client_name)

        # Sprawd≈∫ pojedynczƒÖ grupƒô
        elif "group" in action_config and action_config["group"]:
            group_name = action_config["group"]
            target_clients.extend(self._get_clients_by_group(group_name, orchestrator))

        # Sprawd≈∫ wiele grup
        elif "groups" in action_config and action_config["groups"]:
            groups = action_config["groups"]
            if isinstance(groups, list):
                for group_name in groups:
                    target_clients.extend(
                        self._get_clients_by_group(group_name, orchestrator)
                    )

        # Usuniƒôcie duplikat√≥w
        target_clients = list(set(target_clients))

        return target_clients

    def _get_clients_by_group(self, group_name: str, orchestrator) -> List[str]:
        """
        Pobiera serwisy nale≈ºƒÖce do okre≈õlonej grupy.

        Args:
            group_name: Nazwa grupy
            orchestrator: Referencja do Orchestratora

        Returns:
            Lista nazw serwis√≥w w grupie
        """
        clients = []
        config = orchestrator._configuration.get("clients", {})

        for client_name, client_config in config.items():
            if client_config.get("group") == group_name:
                clients.append(client_name)

        return clients

    def _resolve_template_variables_in_data(
        self, data: Dict[str, Any], context: ScenarioContext
    ) -> Dict[str, Any]:
        """
        RozwiƒÖzuje zmienne szablonowe w s≈Çowniku danych.

        Args:
            data: S≈Çownik z danymi mogƒÖcymi zawieraƒá zmienne szablonowe
            context: Kontekst z danymi do podstawienia

        Returns:
            S≈Çownik z podstawionymi zmiennymi
        """
        resolved_data = {}

        for key, value in data.items():
            if isinstance(value, str):
                # RozwiƒÖ≈º zmienne szablonowe w warto≈õciach tekstowych
                resolved_data[key] = self._resolve_template_variables(value, context)
            elif isinstance(value, dict):
                # Rekurencyjnie rozwiƒÖ≈º zagnie≈ºd≈ºone s≈Çowniki
                resolved_data[key] = self._resolve_template_variables_in_data(
                    value, context
                )
            elif isinstance(value, list):
                # RozwiƒÖ≈º zmienne w listach
                resolved_data[key] = [
                    self._resolve_template_variables(item, context)
                    if isinstance(item, str)
                    else item
                    for item in value
                ]
            else:
                # Pozostaw inne typy bez zmian
                resolved_data[key] = value

        return resolved_data

    async def _send_custom_command_to_client(
        self,
        client_name: str,
        command: str,
        command_data: Dict[str, Any],
        action_config: Dict[str, Any],
        context: ScenarioContext,
    ) -> None:
        """
        Wysy≈Ça polecenie niestandardowe z danymi do konkretnego komponentu.

        Args:
            client_name: Nazwa serwisu
            command: Polecenie do wys≈Çania
            command_data: Dane do wys≈Çania z poleceniem
            action_config: Konfiguracja akcji (dla ewentualnego timeout)
            context: Kontekst wykonania

        Raises:
            ActionExecutionError: W przypadku b≈Çƒôdu wysy≈Çania
        """
        if client_name not in context.clients:
            raise ActionExecutionError(
                "send_custom_command",
                f'Serwis "{client_name}" nie znaleziony w konfiguracji',
            )

        client_config = context.clients[client_name]

        try:
            # Pobierz timeout z konfiguracji akcji (je≈õli podany)
            timeout = action_config.get("timeout", 20.0)
            if isinstance(timeout, str):
                timeout = self._parse_timeout(timeout)

            # U≈ºyj metody _event z Orchestratora do wys≈Çania polecenia z danymi
            event = await context.orchestrator._event(
                destination=client_name,
                destination_address=client_config["address"],
                destination_port=client_config["port"],
                event_type=command,
                data=command_data,  # Tu przekazujemy dane niestandardowe!
                to_be_processed=True,
                maximum_processing_time=float(timeout),
            )

            info(
                f"Wys≈Çano polecenie niestandardowe '{command}' z danymi do serwisu '{client_name}'",
                message_logger=context.message_logger,
            )

        except Exception as e:
            raise ActionExecutionError(
                "send_custom_command",
                f'B≈ÇƒÖd wysy≈Çania polecenia "{command}" z danymi do "{client_name}": {str(e)}',
                e,
            )
